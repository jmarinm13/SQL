# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.


/* Who are the top 10 music artists based on song popularity*/
select artist_name, track_name, popularity from BIT_DB.spotifydata
group by artist_name, track_name, popularity
order by popularity desc
limit 10

/*which artist has a song which tile is bad habits*/
SELECT artist_name, track_name from BIT_DB.spotifydata where track_name LIKE '%HABITS%'
group by artist_name, track_name


/*which songs have a collaboration(feat) on it*/
SELECT track_name from BIT_DB.spotifydata
where track_name like '%feat%'

/*which music artists are in the bottom 5 based on song popularity*/
select artist_name, track_name, popularity from BIT_DB.spotifydata
group by artist_name, track_name, popularity
order by popularity asc
limit 10

/*what are the averages tempo of all songs*/
SELECT avg(tempo) from spotifydata

/*what is the song and artist with the highest key*/
SELECT artist_name, track_name, max(song_key) as highest_key from BIT_DB.spotifydata

/*what is the song and artist with the lowest key*/
SELECT artist_name, track_name, min(song_key) as highest_key from BIT_DB.spotifydata

/*what is the speechiness percentile of each song*/
WITH Percentiles AS (
    SELECT speechiness, PERCENT_RANK() OVER( ORDER BY speechiness) AS Percent_Rank FROM Spotifydata
)
SELECT * FROM Percentiles;

/* divided the dataset in three groups based on their speechiness taking into account the percentile value, how many songs have the most speechiness, the average speechiness, and the lowest speechiness*/
SELECT count(*),
CASE
WHEN speechiness >= 0.0854 then "the song contains more words than music"
WHEN speechiness BETWEEN 0.0502 and 0.0854 then "the song contains both words and music"
ELSE "the song does not contain words"
END AS "Presence of spoken words in a track"
FROM spotifydata
group by "Presence of spoken words in a track"

/*divided the dataset in three groups based on their speechiness taking into account the percentilie value, which songs have the most speechiness, the average speechiness, and the lowest speechiness*/
SELECT artist_name, track_name,
CASE
WHEN speechiness >= 0.0854 then "the song contains more words than music"
WHEN speechiness BETWEEN 0.0502 and 0.0854 then "the song contains both words and music"
ELSE "the song contains more music than words"
END AS "Presence of spoken words in a track"
FROM spotifydata
group by track_name
order by "Presence of spoken words in a track"

/*what is the danceability percentile of each song*/
WITH Percentiles AS (
    SELECT danceability, PERCENT_RANK() OVER( ORDER BY danceability) AS Percent_Rank FROM Spotifydata
)
SELECT * FROM Percentiles;

/* divided the dataset in three groups based on their danceability taking into account the percentile value, how many songs have the most danceability and the least danceability*/
SELECT count(*),
CASE
WHEN danceability BETWEEN 0.714 and 0.903 then "the most danceable songs"
WHEN danceability BETWEEN 0.0 and 0.714 then "the least danceable songs"
END AS "danceable"
FROM spotifydata
group by "danceable"

/*divided the dataset in three groups based on their speechiness taking into account the percentile value, which tracks have the most danceability and the least danceability*/
SELECT artist_name, track_name,
CASE
WHEN danceability BETWEEN 0.714 and 0.903 then "the most danceable songs"
WHEN danceability BETWEEN 0.0 and 0.714 then "the least danceable songs"
END AS "danceable"
FROM spotifydata
group by track_name
order by "danceable"


/*what is the valence percentile of each song*/
WITH Percentiles AS (
    SELECT valence, PERCENT_RANK() OVER( ORDER BY valence) AS Percent_Rank FROM Spotifydata
)
SELECT * FROM Percentiles;

/* divided the dataset in three groups based on their valence taking into account the percentile value, how many songs have a happy, euthymic, or sad mood*/
SELECT count(*),
CASE
WHEN valence BETWEEN 0.679 and 0.958 then "happy"
WHEN valence BETWEEN 0.442 and 0.679 then "euthymic"
Else "sad"
END AS "song_mood"
FROM spotifydata
group by "song_mood"

/*divided the dataset in three groups based on their valence taking into account the percentile value, which song has a happy, euthymic, or sad mood*/
SELECT artist_name, track_name,
CASE
WHEN valence BETWEEN 0.679 and 0.958 then "happy"
WHEN valence BETWEEN 0.442 and 0.679 then "euthymic"
Else "sad"
END AS "song_mood"
FROM spotifydata
group by track_name
order by "song_mood"


